{{>partial_header}}
{{#models}}
{{#model}}
{{#description}}
/// {{{classname}}} : {{{description}}}
{{/description}}

#[allow(unused_imports)]
use serde_json::Value;

{{#vendorExtensions.x-is-array-model}}
#[derive(Debug, Serialize, Deserialize)]
pub struct {{classname}}(Vec<{{{arrayModelType}}}>);
{{/vendorExtensions.x-is-array-model}}
{{^vendorExtensions.x-is-array-model}}
#[derive(Debug, Serialize, Deserialize)]
pub struct {{classname}} {
{{#vars}}
  {{#description}}
  /// {{{description}}}
  {{/description}}
  #[serde(rename = "{{baseName}}")]
  {{name}}: {{^required}}Option<{{/required}}{{{datatype}}}{{^required}}>{{/required}}{{^@last}},{{/@last}}
{{/vars}}
}
{{/vendorExtensions.x-is-array-model}}

impl {{classname}} {
  {{#description}}
  /// {{{description}}}
  {{/description}}
  pub fn new({{#requiredVars}}{{name}}: {{{datatype}}}{{^@last}}, {{/@last}}{{/requiredVars}}) -> {{classname}} {
    {{#vendorExtensions.x-is-array-model}}
    {{classname}}(Vec::new())
    {{/vendorExtensions.x-is-array-model}}
    {{^vendorExtensions.x-is-array-model}}
    {{classname}} {
      {{#vars}}
      {{name}}: {{#required}}{{name}}{{/required}}{{^required}}{{#vendorExtensions.x-is-list-container}}None{{/vendorExtensions.x-is-list-container}}{{#vendorExtensions.x-is-map-container}}None{{/vendorExtensions.x-is-map-container}}{{^vendorExtensions.x-is-container}}None{{/vendorExtensions.x-is-container}}{{/required}}{{^@last}},{{/@last}}
      {{/vars}}
    }
    {{/vendorExtensions.x-is-array-model}}
  }

  {{#vars}}
  pub fn set_{{name}}(&mut self, {{name}}: {{{datatype}}}) {
    self.{{name}} = {{^required}}Some({{name}}){{/required}}{{#required}}{{name}}{{/required}};
  }

  pub fn with_{{name}}(mut self, {{name}}: {{{datatype}}}) -> {{classname}} {
    self.{{name}} = {{^required}}Some({{name}}){{/required}}{{#required}}{{name}}{{/required}};
    self
  }

  pub fn {{name}}(&self) -> {{^required}}Option<{{/required}}&{{{datatype}}}{{^required}}>{{/required}} {
    {{#required}}&{{/required}}self.{{name}}{{^required}}.as_ref(){{/required}}
  }

  {{^required}}
  pub fn reset_{{name}}(&mut self) {
    self.{{name}} = None;
  }
  {{/required}}

  {{/vars}}
}

{{#isEnum}}
// TODO enum 
// List of {{{name}}}
//const (
//  {{#allowableValues}}
//  {{#enumVars}}
//  {{name}} {{{classname}}} = "{{{value}}}"
//  {{/enumVars}}
//  {{/allowableValues}}
//)
{{/isEnum}}


{{/model}}
{{/models}}
